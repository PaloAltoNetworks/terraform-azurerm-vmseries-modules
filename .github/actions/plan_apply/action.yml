name: 'TF plan/apply'
description: 'Runs Terraform plan and/or apply for a specified path.'
inputs:
  tf_version:
    description: 'TF version used.'
    required: true
  path:
    description: 'Path to Terraform module.'
    required: true
  do_apply:
    description: When set to true runs also apply
    type: boolean
    default: false
  idempotence:
    description: When set to true runs plan to on already applied configuration
    type: boolean
    default: true

runs:
  using: "composite"
  steps:

    - name: setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.tf_version }}

    - name: set UUID and provider values value
      id: uuid
      shell: bash
      env:
        TPATH: ${{ inputs.path }}
      run: |
        echo "uuid=$(uuidgen | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ env.ARM_CLIENT_ID }}
        tenant-id: ${{ env.ARM_TENANT_ID }}
        subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

    - name: plan infrastructure
      id: plan
      if: inputs.do_apply == 'false'
      env:
        TPATH: ${{ inputs.path }}
        ARM_USE_OIDC: true
        UUID: ${{ steps.uuid.outputs.uuid }}
        ARM_SKIP_PROVIDER_REGISTRATION: true
      shell: bash
      run: |
        echo "::group::TERRAFORM PLAN"
        cd "$GITHUB_WORKSPACE/$TPATH"
          make plan
        echo "::endgroup::"

    - name: create infrastructure
      id: apply
      if: inputs.do_apply == 'true'
      env:
        TPATH: ${{ inputs.path }}
        ARM_USE_OIDC: true
        UUID: ${{ steps.uuid.outputs.uuid }}
        ARM_SKIP_PROVIDER_REGISTRATION: true
        DO_APPLY: true
      shell: bash
      run: |
        echo "::group::TERRAFORM APPLY"
        cd "$GITHUB_WORKSPACE/$TPATH"
        make test
        echo "::endgroup::"

    - name: test idempotence
      id: idempotence
      if: inputs.do_apply == 'true' && inputs.idempotence == 'true'
      env:
        TPATH: ${{ inputs.path }}
        ARM_USE_OIDC: true
        UUID: ${{ steps.uuid.outputs.uuid }}
        ARM_SKIP_PROVIDER_REGISTRATION: true
      shell: bash
      run: |
        echo "::group::TERRAFORM IDEMPOTENCE"
        cd "$GITHUB_WORKSPACE/$TPATH"
        make idempotence
        echo "::endgroup::"

    - name: run destroy
      id: destroy
      if: inputs.do_apply == 'true'
      env:
        TPATH: ${{ inputs.path }}
        ARM_USE_OIDC: true
        UUID: ${{ steps.uuid.outputs.uuid }}
        ARM_SKIP_PROVIDER_REGISTRATION: true
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE/$TPATH"
        echo "::group::TERRAFORM DESTROY"
        make destroy
        echo "::endgroup::"
